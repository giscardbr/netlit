package br.com.netlit.accounts.domain.account.general.verification;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.TimeZone;
import java.util.UUID;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConverted;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConvertedEnum;

import br.com.netlit.accounts.domain.account.general.entity.AccountType;
import br.com.netlit.accounts.infra.database.LocalDateTimeConverter;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@DynamoDBTable(tableName = "VerificationToken")
public class VerificationTokenEntity {

	public static final int EXPIRATION = 60 * 24;

	@DynamoDBAutoGeneratedKey
	@DynamoDBHashKey(attributeName = "Id")
	private UUID id;

	@DynamoDBAttribute(attributeName = "Token")
	private String token;

	@DynamoDBAttribute(attributeName = "Email")
	private String email;

	@DynamoDBAttribute(attributeName = "Password")
	private String password;

	@DynamoDBTypeConverted(converter = LocalDateTimeConverter.class)
	@DynamoDBAttribute(attributeName = "ExpiryDate")
	private LocalDateTime expiryDate;

	@DynamoDBAttribute(attributeName = "Verified")
	private boolean verified;

	@DynamoDBTypeConvertedEnum
	@DynamoDBAttribute(attributeName = "AccountType")
	private AccountType accountType;

	public static LocalDateTime calculateExpiryDate(int expiryTimeInMinutes) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Timestamp(cal.getTime().getTime()));
		cal.add(Calendar.MINUTE, expiryTimeInMinutes);

		TimeZone tz = cal.getTimeZone();
		ZoneId zid = tz == null ? ZoneId.systemDefault() : tz.toZoneId();
		return LocalDateTime.ofInstant(cal.toInstant(), zid);
	}

	public VerificationTokenEntity(String token) {
		super();
		this.token = token;
	}

	public static VerificationTokenEntity build(final String email, final String password, final String token, AccountType accountType) {

		return builder().email(email).token(token).password(password).expiryDate(calculateExpiryDate(EXPIRATION)).accountType(accountType).build();
	}
}